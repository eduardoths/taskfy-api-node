// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String  @id @default(uuid())
  isAdmin      Boolean @default(false)
  firstName    String
  lastName     String
  username     String  @unique
  email        String  @unique
  passwordHash String

  // relations
  Tasks          Task[]
  Boards         UsersOnBoards[]
  Managers       Manager[]
  Organization   Organization    @relation(fields: [organizationId], references: [id])
  organizationId String

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("users")
}

model Organization {
  // fields
  id          String @id @default(uuid())
  companyName String

  // relations
  users User[]

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("organizations")
}

model Manager {
  // relations
  User      User   @relation(fields: [managerId], references: [id])
  Board     Board  @relation(fields: [boardId], references: [id])
  managerId String
  boardId   String

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([managerId, boardId])
  @@map("managers")
}

model UsersOnBoards {
  // relations
  Board   Board  @relation(fields: [boardId], references: [id])
  User    User   @relation(fields: [userId], references: [id])
  boardId String
  userId  String

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@id([userId, boardId])
  @@map("virtual_boards")
}

model Board {
  // fields
  id    String @id @default(uuid())
  name  String
  color String

  // relations
  users   UsersOnBoards[]
  lists   List[]
  manager Manager[]

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("boards")
}

model List {
  // fields
  id   String @id @default(uuid())
  name String

  // relations
  tasks   Task[]
  Board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId String

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("lists")
}

model Task {
  // fields
  id           String   @id @default(uuid())
  name         String
  dueDate      DateTime
  stressPoints Int

  // relations
  User   User   @relation(fields: [userId], references: [id])
  List   List   @relation(fields: [listId], references: [id], onDelete: Cascade)
  userId String
  listId String

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("tasks")
}
